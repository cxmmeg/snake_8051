C51 COMPILER V8.02   SCH51                                                                 10/19/2013 10:05:36 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE SCH51
OBJECT MODULE PLACED IN Sch51.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Sch51.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*------------------------------------------------------------------*-
   2          
   3             SCH51.C (v1.00) 
   4          
   5            ------------------------------------------------------------------
   6          
   7             *** THESE ARE THE CORE SCHEDULER FUNCTIONS ***
   8             --- These functions may be used with all 8051 devices ---
   9          
  10             *** SCH_MAX_TASKS *must* be set by the user ***
  11             --- see "Sch51.H" ---
  12          
  13             *** Includes (optional) power-saving mode ***
  14             --- You must ensure that the power-down mode is adapted ---
  15             --- to match your chosen device (or disabled altogether) ---
  16          
  17          
  18             COPYRIGHT
  19             ---------
  20          
  21             This code is from the book:
  22          
  23             PATTERNS FOR TIME-TRIGGERED EMBEDDED SYSTEMS by Michael J. Pont 
  24             [Pearson Education, 2001; ISBN: 0-201-33138-1].
  25          
  26             This code is copyright (c) 2001 by Michael J. Pont.
  27           
  28             See book for copyright details and other information.
  29          
  30          -*------------------------------------------------------------------*/
  31          
  32          #include "Main.h"
  33          
  34          #include "Sch51.h"
  35          
  36          // ------ Public variable definitions ------------------------------
  37          
  38          // The array of tasks
  39          sTask SCH_tasks_G[SCH_MAX_TASKS];
  40          
  41          // Used to display the error code
  42          // See Main.H for details of error codes
  43          // See Port.H for details of the error port
  44          tByte Error_code_G = 0;
  45          
  46          // ------ Private function prototypes ------------------------------
  47          
  48          static void SCH_Go_To_Sleep(void);
  49          
  50          // ------ Private variables ----------------------------------------
  51          
  52          // Keeps track of time since last error was recorded (see below)
  53          static tWord Error_tick_count_G;
  54          
  55          // The code of the last error (reset after ~1 minute)
C51 COMPILER V8.02   SCH51                                                                 10/19/2013 10:05:36 PAGE 2   

  56          static tByte Last_error_code_G;
  57          
  58          
  59          /*------------------------------------------------------------------*-
  60          
  61            SCH_Dispatch_Tasks()
  62          
  63            This is the 'dispatcher' function.  When a task (function)
  64            is due to run, SCH_Dispatch_Tasks() will run it.
  65            This function must be called (repeatedly) from the main loop.
  66          
  67          -*------------------------------------------------------------------*/
  68          void SCH_Dispatch_Tasks(void) 
  69             {
  70   1         tByte Index;
  71   1      
  72   1         // Dispatches (runs) the next task (if one is ready)
  73   1         for (Index = 0; Index < SCH_MAX_TASKS; Index++)
  74   1            {
  75   2            if (SCH_tasks_G[Index].RunMe > 0) 
  76   2               {
  77   3               (*SCH_tasks_G[Index].pTask)();  // Run the task
  78   3      
  79   3               SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
  80   3      
  81   3               // Periodic tasks will automatically run again
  82   3               // - if this is a 'one shot' task, remove it from the array
  83   3               if (SCH_tasks_G[Index].Period == 0)
  84   3                  {
  85   4                  SCH_Delete_Task(Index);
  86   4                  }
  87   3               }
  88   2            }
  89   1      
  90   1         // Report system status
  91   1         SCH_Report_Status();  
  92   1      
  93   1         // The scheduler enters idle mode at this point 
  94   1         SCH_Go_To_Sleep();          
  95   1         }
  96          
  97          /*------------------------------------------------------------------*-
  98          
  99            SCH_Add_Task()
 100          
 101            Causes a task (function) to be executed at regular intervals 
 102            or after a user-defined delay
 103          
 104            Fn_P   - The name of the function which is to be scheduled.
 105                     NOTE: All scheduled functions must be 'void, void' -
 106                     that is, they must take no parameters, and have 
 107                     a void return type. 
 108                             
 109            DELAY  - The interval (TICKS) before the task is first executed
 110          
 111            PERIOD - If 'PERIOD' is 0, the function is only called once,
 112                     at the time determined by 'DELAY'.  If PERIOD is non-zero,
 113                     then the function is called repeatedly at an interval
 114                     determined by the value of PERIOD (see below for examples
 115                     which should help clarify this).
 116          
 117          
C51 COMPILER V8.02   SCH51                                                                 10/19/2013 10:05:36 PAGE 3   

 118            RETURN VALUE:  
 119          
 120            Returns the position in the task array at which the task has been 
 121            added.  If the return value is SCH_MAX_TASKS then the task could 
 122            not be added to the array (there was insufficient space).  If the
 123            return value is < SCH_MAX_TASKS, then the task was added 
 124            successfully.  
 125          
 126            Note: this return value may be required, if a task is
 127            to be subsequently deleted - see SCH_Delete_Task().
 128          
 129            EXAMPLES:
 130          
 131            Task_ID = SCH_Add_Task(Do_X,1000,0);
 132            Causes the function Do_X() to be executed once after 1000 sch ticks.            
 133          
 134            Task_ID = SCH_Add_Task(Do_X,0,1000);
 135            Causes the function Do_X() to be executed regularly, every 1000 sch ticks.            
 136          
 137            Task_ID = SCH_Add_Task(Do_X,300,1000);
 138            Causes the function Do_X() to be executed regularly, every 1000 ticks.
 139            Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 140           
 141          -*------------------------------------------------------------------*/
 142          tByte SCH_Add_Task(void (code * pFunction)(), 
 143                             const tWord DELAY, 
 144                             const tWord PERIOD)    
 145             {
 146   1         tByte Index = 0;
 147   1         
 148   1         // First find a gap in the array (if there is one)
 149   1         while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 150   1            {
 151   2            Index++;
 152   2            } 
 153   1         
 154   1         // Have we reached the end of the list?   
 155   1         if (Index == SCH_MAX_TASKS)
 156   1            {
 157   2            // Task list is full
 158   2            //
 159   2            // Set the global error variable
 160   2            Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 161   2      
 162   2            // Also return an error code
 163   2            return SCH_MAX_TASKS;  
 164   2            }
 165   1            
 166   1         // If we're here, there is a space in the task array
 167   1         SCH_tasks_G[Index].pTask  = pFunction;
 168   1           
 169   1         SCH_tasks_G[Index].Delay  = DELAY;
 170   1         SCH_tasks_G[Index].Period = PERIOD;
 171   1      
 172   1         SCH_tasks_G[Index].RunMe  = 0;
 173   1      
 174   1         return Index; // return position of task (to allow later deletion)
 175   1         }
 176          
 177          /*------------------------------------------------------------------*-
 178          
 179            SCH_Delete_Task()
C51 COMPILER V8.02   SCH51                                                                 10/19/2013 10:05:36 PAGE 4   

 180          
 181            Removes a task from the scheduler.  Note that this does
 182            *not* delete the associated function from memory: 
 183            it simply means that it is no longer called by the scheduler. 
 184           
 185            TASK_INDEX - The task index.  Provided by SCH_Add_Task(). 
 186          
 187            RETURN VALUE:  RETURN_ERROR or RETURN_NORMAL
 188          
 189          -*------------------------------------------------------------------*/
 190          bit SCH_Delete_Task(const tByte TASK_INDEX) 
 191             {
 192   1         bit Return_code;
 193   1      
 194   1         if (SCH_tasks_G[TASK_INDEX].pTask == 0)
 195   1            {
 196   2            // No task at this location...
 197   2            //
 198   2            // Set the global error variable
 199   2            Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 200   2      
 201   2            // ...also return an error code
 202   2            Return_code = RETURN_ERROR;
 203   2            }
 204   1         else
 205   1            {
 206   2            Return_code = RETURN_NORMAL;
 207   2            }      
 208   1         
 209   1         SCH_tasks_G[TASK_INDEX].pTask   = 0x0000;
 210   1         SCH_tasks_G[TASK_INDEX].Delay   = 0;
 211   1         SCH_tasks_G[TASK_INDEX].Period  = 0;
 212   1      
 213   1         SCH_tasks_G[TASK_INDEX].RunMe   = 0;
 214   1      
 215   1         return Return_code;       // return status
 216   1         }
 217          
 218          
 219          /*------------------------------------------------------------------*-
 220          
 221            SCH_Report_Status()
 222          
 223            Simple function to display error codes.
 224          
 225            This version displays code on a port with attached LEDs:
 226            adapt, if required, to report errors over serial link, etc.
 227          
 228            Errors are only displayed for a limited period 
 229            (60000 ticks = 1 minute at 1ms tick interval).
 230            After this the the error code is reset to 0. 
 231          
 232            This code may be easily adapted to display the last
 233            error 'for ever': this may be appropriate in your
 234            application.
 235          
 236            See Chapter 10 for further information.
 237          
 238          -*------------------------------------------------------------------*/
 239          void SCH_Report_Status(void)
 240             {
 241   1      #ifdef SCH_REPORT_ERRORS
C51 COMPILER V8.02   SCH51                                                                 10/19/2013 10:05:36 PAGE 5   

                 // ONLY APPLIES IF WE ARE REPORTING ERRORS
                 // Check for a new error code
                 if (Error_code_G != Last_error_code_G)
                    {
                    // Negative logic on LEDs assumed
                    Error_port = 255 - Error_code_G;
                    
                    Last_error_code_G = Error_code_G;
              
                    if (Error_code_G != 0)
                       {
                       Error_tick_count_G = 60000;
                       }
                    else
                       {
                       Error_tick_count_G = 0;
                       }
                    }
                 else
                    {
                    if (Error_tick_count_G != 0)
                       {
                       if (--Error_tick_count_G == 0)
                          {
                          Error_code_G = 0; // Reset error code
                          }
                       }
                    }
              #endif
 271   1         }
 272          
 273          
 274          /*------------------------------------------------------------------*-
 275          
 276            SCH_Go_To_Sleep()
 277          
 278            This scheduler enters 'idle mode' between clock ticks
 279            to save power.  The next clock tick will return the processor
 280            to the normal operating state.
 281          
 282            Note: a slight performance improvement is possible if this
 283            function is implemented as a macro, or if the code here is simply 
 284            pasted into the 'dispatch' function.  
 285          
 286            However, by making this a function call, it becomes easier 
 287            - during development - to assess the performance of the 
 288            scheduler, using the 'performance analyser' in the Keil 
 289            hardware simulator. See Chapter 14 for examples for this. 
 290          
 291            *** May wish to disable this if using a watchdog ***
 292          
 293            *** ADAPT AS REQUIRED FOR YOUR HARDWARE ***
 294          
 295          -*------------------------------------------------------------------*/
 296          void SCH_Go_To_Sleep()
 297             {
 298   1         PCON |= 0x01;    // Enter idle mode (generic 8051 version)
 299   1      
 300   1         // Entering idle mode requires TWO consecutive instructions 
 301   1         // on 80c515 / 80c505 - to avoid accidental triggering
 302   1         //PCON |= 0x01;    // Enter idle mode (#1)
 303   1         //PCON |= 0x20;    // Enter idle mode (#2)
C51 COMPILER V8.02   SCH51                                                                 10/19/2013 10:05:36 PAGE 6   

 304   1         }
 305          
 306          /*------------------------------------------------------------------*-
 307            ---- END OF FILE -------------------------------------------------
 308          -*------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    252    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     25       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
